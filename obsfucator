<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Roblox Script Obfer</title>
    <style>
        body {
            font-family: monospace, Arial, sans-serif;
            background-color: #1e1e1e;
            color: #ffffff;
            margin: 20px;
        }
        h1 {
            text-align: center;
            color: #ff5555;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
        }
        textarea {
            width: 100%;
            height: 250px;
            background-color: #2d2d2d;
            color: #ffffff;
            border: 1px solid #555;
            padding: 10px;
            margin-bottom: 10px;
            resize: vertical;
            font-family: monospace;
        }
        button {
            background-color: #ff5555;
            color: #ffffff;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            margin-right: 10px;
        }
        button:hover {
            background-color: #ff7777;
        }
        #warning {
            color: #ffaa00;
            font-size: 0.9em;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h1>wesd obf</h1>
    <div class="container">
        <h3>Input Lua Script</h3>
        <textarea id="inputScript" placeholder="Paste your Roblox script here..."></textarea>
        <button onclick="obfuscateScript()">Obfuscate</button>
        <button onclick="copyOutput()">Copy Output</button>
        <h3>Obfuscated Script</h3>
        <textarea id="outputScript" readonly></textarea>
    </div>

    <script>
        // Utility functions
        function generateRandomString(length) {
            const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
            let result = '';
            for (let i = 0; i < length; i++) {
                result += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return result;
        }

        function generateUnicodeVar() {
            // Use unprintable Unicode chars (e.g., U+200B, zero-width space)
            return '\u200B' + generateRandomString(6) + '\u200C';
        }

        function xorEncrypt(str, key) {
            let result = '';
            for (let i = 0; i < str.length; i++) {
                result += String.fromCharCode(str.charCodeAt(i) ^ key.charCodeAt(i % key.length));
            }
            return btoa(result); // Base64 to make it safe for Lua
        }

        function obfuscateScript() {
            const input = document.getElementById('inputScript').value;
            if (!input.trim()) {
                alert('Please enter a Lua script to obfuscate!');
                return;
            }

            // Step 1: Variable Mangling with Unicode
            const varMap = {};
            let output = input.replace(/\b(local\s+)([a-zA-Z_][a-zA-Z0-9_]*)\b/g, (match, localKeyword, varName) => {
                if (['function', 'if', 'else', 'elseif', 'while', 'for', 'in', 'do', 'end', 'return', 'break', 'nil', 'true', 'false', 'pcall'].includes(varName)) {
                    return match;
                }
                if (!varMap[varName]) {
                    varMap[varName] = generateUnicodeVar();
                }
                return localKeyword + varMap[varName];
            });
            output = output.replace(/\b([a-zA-Z_][a-zA-Z0-9_]*)\b/g, (match) => varMap[match] || match);

            // Step 2: String Encryption (XOR with random key)
            const xorKey = generateRandomString(8);
            output = output.replace(/"([^"]*)"/g, (match, str) => {
                const encrypted = xorEncrypt(str, xorKey);
                return `(_${generateRandomString(6)}(atob("${encrypted}"), "${xorKey}"))`;
            });

            // Step 3: Convert to Pseudo-Bytecode
            const lines = output.split('\n').filter(line => !line.trim().startsWith('--') && line.trim());
            const bytecode = [];
            lines.forEach((line, index) => {
                bytecode.push(`{op="${generateRandomString(4)}",args={"${btoa(line)}"}}`);
            });

            // Step 4: Anti-Deobfuscation Traps
            const trapCode = `
                local ${generateUnicodeVar()} = math.random();
                if ${generateUnicodeVar()} > 1 then
                    while true do
                        local ${generateUnicodeVar()} = {};
                        for i=1,1000000 do ${generateUnicodeVar()}[i] = i; end
                    end
                end
            `;

            // Step 5: Custom Lua VM
            const vmCode = `
                local ${generateUnicodeVar()} = {${bytecode.join(',')}};
                local ${generateUnicodeVar()} = function(${generateUnicodeVar()}, ${generateUnicodeVar()})
                    local ${generateUnicodeVar()} = atob(${generateUnicodeVar()});
                    for ${generateUnicodeVar()}=1,${generateUnicodeVar()}:len() do
                        ${generateUnicodeVar()} = ${generateUnicodeVar()} .. string.char(${generateUnicodeVar()}:byte(${generateUnicodeVar()}) ~ "${xorKey}":byte(${generateUnicodeVar()} % "${xorKey}":len()));
                    end
                    return ${generateUnicodeVar()};
                end;
                for ${generateUnicodeVar()}=1,#${generateUnicodeVar()} do
                    local ${generateUnicodeVar()} = ${generateUnicodeVar()}[${generateUnicodeVar()}];
                    local ${generateUnicodeVar()} = ${generateUnicodeVar()}(atob(${generateUnicodeVar()}.args[1]), "${xorKey}");
                    ${trapCode}
                    loadstring(${generateUnicodeVar()})();
                end
            `;

            // Step 6: Junk Code and Wrapping
            const junkCode = `
                local ${generateUnicodeVar()} = math.random(1, 100);
                if ${generateUnicodeVar()} < 0 then
                    local ${generateUnicodeVar()} = nil;
                    ${generateUnicodeVar()} = ${generateUnicodeVar()} or {};
                end
            `;
            output = `(function() ${junkCode} return (function() ${vmCode} end)() end)()`;

            // Step 7: Minify
            output = output
                .replace(/\s+/g, ' ')
                .replace(/(\s*;\s*)+/g, ';')
                .trim();

            document.getElementById('outputScript').value = output;
        }

        function copyOutput() {
            const output = document.getElementById('outputScript');
            output.select();
            document.execCommand('copy');
            alert('Obfuscated script copied to clipboard!');
        }
    </script>
</body>
</html>
