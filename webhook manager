<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Injectroid Webhook v2</title>
    <style>
        /* --- Fonts & Base --- */
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Roboto+Mono:wght@300;400;700&display=swap');
        
        :root {
            --primary-color: #00ddff; --secondary-color: #f000ff; --danger-color: #ff3333; --success-color: #00ff88;
            --warn-color: #ffaa00; --dark-color: #0a0a0e; --bg-color: #111116; --text-color: #e0e0e0;
            --glow-color: rgba(0, 221, 255, 0.6); --glow-color-secondary: rgba(240, 0, 255, 0.6);
            --font-display: 'Orbitron', sans-serif; --font-mono: 'Roboto Mono', monospace; --border-style: 1px solid var(--primary-color);
        }

        /* --- Base & Body --- */
        * { box-sizing: border-box; margin: 0; padding: 0; }
        html { scrollbar-color: var(--primary-color) var(--dark-color); }
        body {
            background-color: var(--dark-color); color: var(--text-color); font-family: var(--font-mono);
            display: flex; justify-content: center; align-items: center; min-height: 100vh;
            overflow: hidden; position: relative;
        }
        body::before {
            content: ''; position: absolute; top: 0; left: 0; right: 0; bottom: 0;
            background: radial-gradient(ellipse at center, rgba(17,17,22,0.8) 0%,rgba(10,10,14,1) 70%),
                        linear-gradient(90deg, rgba(255,0,0,0.02), rgba(0,255,0,0.01), rgba(0,0,255,0.02));
            z-index: 1; pointer-events: none; animation: subtle-flicker 5s infinite;
        }

        /* --- Main App Layout --- */
        #main-app {
            width: 100%; max-width: 1900px; height: 98vh; background: rgba(17,17,22,0.7);
            border: var(--border-style); border-radius: 8px; box-shadow: 0 0 25px var(--glow-color);
            display: flex; flex-direction: column; z-index: 5; padding: 15px; backdrop-filter: blur(5px);
        }
        header { padding: 5px 20px; border-bottom: var(--border-style); display: flex; justify-content: space-between; align-items: center; flex-shrink: 0; }
        #title { font-family: var(--font-display); font-weight: 900; font-size: 2em; color: var(--primary-color); text-shadow: 0 0 10px var(--glow-color); }
        .content-grid { display: grid; grid-template-columns: 1fr 1.5fr 1fr; flex-grow: 1; overflow: hidden; padding-top: 15px; gap: 15px; }
        .panel { display: flex; flex-direction: column; gap: 15px; overflow-y: auto; padding: 10px; }
        
        /* --- Modules & UI --- */
        .module { border: 1px solid #333; padding: 15px; background: rgba(10,10,14,0.5); border-radius: 5px; transition: all 0.3s; }
        .module:hover { border-color: var(--primary-color); box-shadow: 0 0 10px rgba(0,221,255,0.2); }
        .module h3 { font-family: var(--font-display); color: var(--primary-color); margin-bottom: 15px; border-bottom: 1px solid #333; padding-bottom: 10px; font-size: 1.1em; }
        .module p.description { font-size: 0.8em; color: #aaa; margin-top: -10px; margin-bottom: 10px; line-height: 1.5; }
        .module-content { display: flex; flex-direction: column; gap: 12px; }
        input, textarea, select { background: var(--dark-color); border: 1px solid #444; color: var(--text-color); padding: 10px; font-family: var(--font-mono); font-size: 0.9em; border-radius: 4px; width: 100%; transition: all 0.3s ease; }
        textarea { min-height: 80px; resize: vertical; }
        input:focus, textarea:focus, select:focus { outline: none; border-color: var(--secondary-color); box-shadow: 0 0 10px var(--glow-color-secondary); }
        input:disabled { background: #000; color: #777; border-color: #222; }
        button { background: transparent; border: 1px solid var(--primary-color); color: var(--primary-color); padding: 10px 15px; font-family: var(--font-display); cursor: pointer; border-radius: 4px; font-size: 0.9em; transition: all 0.3s ease; }
        button:hover:not(:disabled) { background: var(--primary-color); color: var(--dark-color); box-shadow: 0 0 15px var(--glow-color); transform: translateY(-1px); }
        button.secondary { border-color: var(--secondary-color); color: var(--secondary-color); }
        button.secondary:hover:not(:disabled) { background: var(--secondary-color); color: var(--dark-color); box-shadow: 0 0 15px var(--glow-color-secondary); }
        button.danger { border-color: var(--danger-color); color: var(--danger-color); }
        button.danger:hover:not(:disabled) { background: var(--danger-color); color: #fff; }
        button:disabled { border-color: #555; color: #555; cursor: not-allowed; }
        .button-group { display: flex; gap: 10px; margin-top: 10px; flex-wrap: wrap; }
        .dynamic-field { display: flex; gap: 5px; align-items: center; }
        .dynamic-field input { flex-grow: 1; }
        .dynamic-field button { padding: 5px; font-size: 1.2em; line-height: 1; border-color: var(--danger-color); color: var(--danger-color); }
        #webhook-info-display { font-size: 0.85em; line-height: 1.8; } #webhook-info-display code { color: var(--primary-color); }

        /* --- Logger & Animations --- */
        #log-output { flex-grow: 1; font-size: 0.85em; line-height: 1.6; word-break: break-all; overflow-y: auto; padding-right: 10px; }
        #log-output p { margin-bottom: 5px; animation: text-appear 0.3s ease; }
        .log-info{color:#ccc} .log-success{color:var(--success-color)} .log-error{color:var(--danger-color)} .log-warn{color:var(--warn-color)} .log-cmd{color:var(--secondary-color)} .log-time{color:#666; margin-right: 10px;}
        ::-webkit-scrollbar { width: 8px; } ::-webkit-scrollbar-track { background: #222; } ::-webkit-scrollbar-thumb { background: var(--primary-color); border-radius: 4px; }
        @keyframes subtle-flicker{0%,100%{opacity:1}50%{opacity:0.95}} @keyframes text-appear{from{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}
    </style>
</head>
<body>
    <div id="main-app">
        <header><h1 id="title">INJECTROID WEBHOOK v2</h1></header>
        <div class="content-grid">
            <!-- Left Panel -->
            <div class="panel">
                <div class="module">
                    <h3>Webhook Configuration</h3>
                    <div class="module-content">
                        <input type="password" id="webhook-url-input" placeholder="Enter & Lock Webhook URL...">
                        <div class="button-group">
                            <button id="lock-webhook-btn">Lock & Validate</button>
                            <button id="clear-webhook-btn" class="danger">Clear</button>
                        </div>
                        <div id="webhook-info-display" style="margin-top: 10px;"></div>
                    </div>
                </div>
                <div class="module">
                    <h3>Core Actions</h3>
                    <div class="module-content">
                        <input type="text" id="webhook-name" placeholder="Webhook Username Override">
                        <input type="text" id="webhook-avatar" placeholder="Webhook Avatar URL Override">
                        <textarea id="simple-message" placeholder="Message content..." style="margin-top:10px"></textarea>
                        <button id="send-simple-btn">Send Simple Message</button>
                    </div>
                </div>
                <div class="module">
                    <h3>Message Management</h3>
                    <div class="module-content">
                        <input type="text" id="message-id" placeholder="Target Message ID">
                        <div class="button-group">
                            <button id="delete-message-btn">Delete Message</button>
                            <button id="edit-message-btn">Edit Message</button>
                        </div>
                    </div>
                </div>
                 <div class="module">
                    <h3>Automated Tasks</h3>
                    <div class="module-content">
                        <input type="text" id="spam-interval" placeholder="Spam Interval (ms)">
                         <div class="button-group">
                            <button id="spam-start-btn">Start Spam</button>
                            <button id="spam-stop-btn" disabled>Stop Spam</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Middle Panel -->
            <div class="panel">
                <div class="module">
                    <h3>Advanced Embed Builder</h3>
                    <div class="module-content">
                        <input type="text" id="embed-author" placeholder="Author Text">
                        <input type="text" id="embed-title" placeholder="Title">
                        <textarea id="embed-description" placeholder="Description..."></textarea>
                        <input type="text" id="embed-footer" placeholder="Footer Text">
                        <div style="display:flex; align-items:center; gap:10px;"><span>Color:</span><input type="color" id="embed-color" value="#00ddff" style="height:40px;padding:5px;"></div>
                        <div id="embed-fields-container"></div>
                        <div class="button-group">
                           <button id="embed-add-field-btn" class="secondary">Add Field</button>
                           <button id="send-embed-btn">Send Embed</button>
                        </div>
                    </div>
                </div>
                 <div class="module">
                    <h3>Interactive Components</h3>
                     <p class="description">Add clickable buttons to your message. URLs are required by Discord.</p>
                     <div id="button-components-container"></div>
                     <button id="add-component-btn" class="secondary">Add Button</button>
                </div>
            </div>

            <!-- Right Panel -->
            <div class="panel">
                <div class="module">
                    <h3>Text Tools & Animations</h3>
                    <div class="module-content">
                        <input type="text" id="animation-text" placeholder="Text for animation...">
                        <div class="button-group">
                            <button id="text-anim-start-btn">Start Typing Animation</button>
                            <button id="text-anim-stop-btn" disabled>Stop Animation</button>
                        </div>
                    </div>
                </div>
                <div class="module">
                    <h3>Troll & Utility Features</h3>
                    <div class="module-content">
                         <input type="text" id="ghost-ping-user-id" placeholder="Ghost Ping Target User ID">
                         <button id="ghost-ping-btn">Send Ghost Ping</button>
                         <div class="button-group" style="margin-top: 15px;">
                             <button id="health-check-btn" class="secondary">Health Check</button>
                             <button id="rickroll-btn" class="secondary">Rickroll Embed</button>
                         </div>
                         <div class="button-group">
                             <button id="fake-ban-btn" class="danger">Fake Ban</button>
                             <button id="fake-fail-btn" class="danger">Fake Fail Msg</button>
                         </div>
                    </div>
                </div>
                <div class="module" style="flex-grow: 1; display: flex; flex-direction: column;">
                    <h3>SYSTEM LOG</h3>
                    <div id="log-output"></div>
                </div>
            </div>
        </div>
    </div>

<script>
(async function() {
    // --- State & Config ---
    let activeWebhookUrl = null;
    let spamIntervalId = null;
    let animationState = { intervalId: null, messageId: null, text: '', index: 0 };
    const logOutput = document.getElementById('log-output');

    // --- Core Functions ---
    function log(message, type = 'info') {
        const p = document.createElement('p');
        p.className = `log-${type}`;
        p.innerHTML = `<span class="log-time">[${new Date().toLocaleTimeString()}]</span> ${message}`;
        logOutput.prepend(p);
    }

    async function sendWebhook(payload, isRetry = false) {
        if (!activeWebhookUrl) { log('Webhook not locked. Configure first.', 'error'); return null; }
        try {
            const response = await fetch(activeWebhookUrl + '?wait=true', {
                method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload)
            });
            if (!response.ok) {
                if (response.status === 429 && !isRetry) { // Rate limit
                    const retryAfter = (await response.json()).retry_after * 1000;
                    log(`Rate limited. Retrying in ${retryAfter / 1000}s...`, 'warn');
                    await new Promise(res => setTimeout(res, retryAfter));
                    return sendWebhook(payload, true);
                }
                log(`Webhook Error (${response.status}): ${JSON.stringify(await response.json())}`, 'error');
                return null;
            }
            if (!payload.content?.includes("Health Check")) log('Payload sent successfully.', 'success');
            return await response.json();
        } catch (e) { log(`Network Error: ${e.message}`, 'error'); return null; }
    }

    async function modifyWebhook(method, endpoint = '', payload = {}) {
        if (!activeWebhookUrl) { log('Webhook not locked.', 'error'); return null; }
        try {
            const res = await fetch(activeWebhookUrl + endpoint, {
                method, headers: { 'Content-Type': 'application/json' }, body: Object.keys(payload).length > 0 ? JSON.stringify(payload) : undefined
            });
            if (!res.ok) log(`Webhook Modify Error (${res.status})`, 'error');
            return res;
        } catch (e) { log(`Network Modify Error: ${e.message}`, 'error'); return null; }
    }
    
    // --- UI & Feature Logic ---
    function updateWebhookInfo(data) {
        document.getElementById('webhook-info-display').innerHTML = `
            Name: <code>${data.name}</code><br>
            Server ID: <code>${data.guild_id}</code><br>
            Channel ID: <code>${data.channel_id}</code>
        `;
    }

    function buildPayload() {
        const payload = {
            username: document.getElementById('webhook-name').value || null,
            avatar_url: document.getElementById('webhook-avatar').value || null,
        };
        const components = Array.from(document.querySelectorAll('#button-components-container .dynamic-field')).map(div => {
            const inputs = div.getElementsByTagName('input');
            const selects = div.getElementsByTagName('select');
            return { type: 2, style: parseInt(selects[0].value, 10), label: inputs[0].value, url: inputs[1].value };
        }).filter(c => c.label && c.url);
        
        if(components.length > 0) payload.components = [{ type: 1, components }];
        return payload;
    }

    // --- Listeners ---
    document.getElementById('lock-webhook-btn').addEventListener('click', async () => {
        const urlInput = document.getElementById('webhook-url-input');
        const url = urlInput.value;
        if (!url.includes('discord.com/api/webhooks')) {
            log('Invalid Webhook URL format.', 'error');
            return;
        }
        activeWebhookUrl = url;
        const res = await modifyWebhook('GET');
        if (res && res.ok) {
            log('Webhook validated and locked.', 'success');
            urlInput.disabled = true;
            updateWebhookInfo(await res.json());
        } else {
            log('Webhook validation failed. Check URL and permissions.', 'error');
            activeWebhookUrl = null;
        }
    });

    document.getElementById('clear-webhook-btn').addEventListener('click', () => {
        const urlInput = document.getElementById('webhook-url-input');
        urlInput.disabled = false;
        urlInput.value = '';
        activeWebhookUrl = null;
        document.getElementById('webhook-info-display').innerHTML = '';
        log('Webhook configuration cleared.', 'warn');
    });

    document.getElementById('send-simple-btn').addEventListener('click', () => {
        const payload = buildPayload();
        payload.content = document.getElementById('simple-message').value;
        if (payload.content) sendWebhook(payload);
    });

    // Message Management
    document.getElementById('delete-message-btn').addEventListener('click', () => {
        const id = document.getElementById('message-id').value;
        if(id) modifyWebhook('DELETE', `/messages/${id}`);
    });
    document.getElementById('edit-message-btn').addEventListener('click', () => {
        const id = document.getElementById('message-id').value;
        const content = document.getElementById('simple-message').value;
        if(id && content) modifyWebhook('PATCH', `/messages/${id}`, { content });
    });
    
    // Automated Tasks
    document.getElementById('spam-start-btn').addEventListener('click', () => {
        const interval = parseInt(document.getElementById('spam-interval').value, 10);
        const content = document.getElementById('simple-message').value;
        if (!interval || !content) { log('Spam requires content and interval.', 'error'); return; }
        if (spamIntervalId) return;
        log('Starting spam...', 'cmd');
        document.getElementById('spam-start-btn').disabled = true;
        document.getElementById('spam-stop-btn').disabled = false;
        spamIntervalId = setInterval(() => sendWebhook({ content }), interval);
    });
    document.getElementById('spam-stop-btn').addEventListener('click', () => {
        if (!spamIntervalId) return;
        clearInterval(spamIntervalId);
        spamIntervalId = null;
        log('Spam stopped.', 'warn');
        document.getElementById('spam-start-btn').disabled = false;
        document.getElementById('spam-stop-btn').disabled = true;
    });
    
    // Embeds & Components
    document.getElementById('embed-add-field-btn').addEventListener('click', () => {
        document.getElementById('embed-fields-container').insertAdjacentHTML('beforeend',
            `<div class="dynamic-field"><input type="text" placeholder="Field Title"><input type="text" placeholder="Field Value"><button onclick="this.parentElement.remove()">-</button></div>`);
    });
    document.getElementById('add-component-btn').addEventListener('click', () => {
        document.getElementById('button-components-container').insertAdjacentHTML('beforeend',
            `<div class="dynamic-field"><input type="text" placeholder="Button Label"><input type="text" placeholder="Button URL"><select><option value="5">URL (Grey)</option><option value="1">Primary (Blue)</option><option value="2">Secondary (Grey)</option><option value="3">Success (Green)</option><option value="4">Danger (Red)</option></select><button onclick="this.parentElement.remove()">-</button></div>`);
    });
    document.getElementById('send-embed-btn').addEventListener('click', () => {
        const payload = buildPayload();
        payload.embeds = [{
            type: 'rich',
            color: parseInt(document.getElementById('embed-color').value.substring(1), 16),
            author: { name: document.getElementById('embed-author').value || null },
            title: document.getElementById('embed-title').value || null,
            description: document.getElementById('embed-description').value || null,
            fields: Array.from(document.querySelectorAll('#embed-fields-container .dynamic-field')).map(div => ({ name: div.children[0].value, value: div.children[1].value || '\u200b', inline: false })).filter(f => f.name),
            footer: { text: document.getElementById('embed-footer').value || null },
        }];
        sendWebhook(payload);
    });

    // Text & Troll
    document.getElementById('text-anim-start-btn').addEventListener('click', async () => {
        if (animationState.intervalId) { log('Animation already running.', 'warn'); return; }
        const text = document.getElementById('animation-text').value;
        if (!text) { log('Animation text is required.', 'error'); return; }
        log('Starting text animation...', 'cmd');
        document.getElementById('text-anim-start-btn').disabled = true;
        document.getElementById('text-anim-stop-btn').disabled = false;
        
        const initialMsg = await sendWebhook({ content: '`█`' });
        if (!initialMsg) {
             document.getElementById('text-anim-start-btn').disabled = false;
             document.getElementById('text-anim-stop-btn').disabled = true;
             return;
        }
        animationState = { messageId: initialMsg.id, text, index: 0, intervalId: null };
        animationState.intervalId = setInterval(() => {
            animationState.index = (animationState.index + 1) % (animationState.text.length + 1);
            modifyWebhook('PATCH', `/messages/${animationState.messageId}`, { content: `\`${animationState.text.substring(0, animationState.index)}█\`` });
        }, 1000); // 1s to avoid rate limits
    });
    document.getElementById('text-anim-stop-btn').addEventListener('click', () => {
        if (!animationState.intervalId) return;
        clearInterval(animationState.intervalId);
        modifyWebhook('PATCH', `/messages/${animationState.messageId}`, { content: `\`${animationState.text}\` (Animation Stopped)` });
        log('Text animation stopped.', 'warn');
        animationState = { intervalId: null, messageId: null, text: '', index: 0 };
        document.getElementById('text-anim-start-btn').disabled = false;
        document.getElementById('text-anim-stop-btn').disabled = true;
    });
    
    document.getElementById('ghost-ping-btn').addEventListener('click', async () => {
        const userId = document.getElementById('ghost-ping-user-id').value;
        if (!userId) return;
        const msg = await sendWebhook({ content: `<@${userId}>` });
        if (msg) setTimeout(() => modifyWebhook('PATCH', `/messages/${msg.id}`, { content: `\`Message was redacted.\`` }), 300);
    });
    document.getElementById('health-check-btn').addEventListener('click', async () => {
        const startTime = Date.now();
        const res = await sendWebhook({ content: "Health Check Probe..." });
        const endTime = Date.now();
        if(!res) return;
        const timezones = {"New York (EST)": "America/New_York", "Oklahoma (CST)": "America/Chicago", "Sydney (AEST)": "Australia/Sydney", "Ukraine (EET)": "Europe/Kyiv"};
        await modifyWebhook('PATCH', `/messages/${res.id}`, { content: "", embeds: [{ title: "Injectroid System Health Check", color: 0x00ff88, fields: [{ name: "API Latency", value: `\`${endTime - startTime}ms\``, inline: true }, { name: "Status", value: "`Operational`", inline: true }, ...Object.entries(timezones).map(([n, z]) => ({name:n, value:`\`${new Date().toLocaleString("en-US", {timeZone:z, hour12:true, year:'numeric', month:'short', day:'numeric', hour:'2-digit', minute:'2-digit'})}\``, inline:true}))], footer: { text: "Probe successful. All systems nominal." }, timestamp: new Date().toISOString() }] });
    });
    document.getElementById('rickroll-btn').addEventListener('click', () => sendWebhook({ embeds: [{title:"Check out this cool video!", url:"https://www.youtube.com/watch?v=dQw4w9WgXcQ", image:{url:"https://i.ytimg.com/vi/dQw4w9WgXcQ/hqdefault.jpg"}}] }));
    document.getElementById('fake-ban-btn').addEventListener('click', () => sendWebhook({ embeds: [{color:0xff3333, description:"<:ban:865449589327265802> **User was banned from this server.**"}] }));
    document.getElementById('fake-fail-btn').addEventListener('click', () => sendWebhook({ embeds: [{color:0xff3333, title:"Message failed to load", description:"There was an error loading the content of this message. Please try again later.", footer:{text:"Error Code: 50035"}}] }));

    // Init
    log('Injectroid Interface Initialized.', 'info');
})();
</script>
</body>
</html>
